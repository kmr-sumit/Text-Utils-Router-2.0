{"version":3,"sources":["components/Alert.js","components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","style","height","alert","className","role","type","msg","About","useState","color","backgroundColor","border","myStyle","setMyStyle","btnText","setBtnText","id","onClick","Navbar","modePassed","href","title","to","homeText","aboutText","changeMode","htmlFor","TextForm","text","setText","heading","rows","onChange","event","target","value","placeholder","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","App","mode","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a4158839.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    <div style={{ height: \"50px\" }}>\r\n      {props.alert &&\r\n      <div\r\n        className=\"alert alert-warning alert-dismissible fade show\"\r\n        role=\"alert\"\r\n      >\r\n        <strong>{props.alert.type}</strong> : {props.alert.msg}\r\n      </div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction About() {\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n        border: \"1px solid black\"\r\n    })\r\n\r\n    //Changing the  text of Enable Dark Mode Button\r\n    const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n\r\n    function toggleStyle(){\r\n        if(myStyle.color === \"white\"){\r\n            setBtnText(\"Enable Dark Mode\")\r\n            setMyStyle({\r\n                color:\"black\",\r\n                backgroundColor:\"white\",\r\n                border:\"1px solid white\"\r\n            })\r\n            \r\n        }\r\n        else {\r\n            setBtnText(\"Enable Light Mode\")\r\n            setMyStyle({\r\n                color:\"white\",\r\n                backgroundColor:\"black\"\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\" id=\"headingOne\">\r\n                        <h2 className=\"mb-0\">\r\n                            <button\r\n                                className=\"btn btn-link btn-block text-left\"\r\n                                type=\"button\"\r\n                                data-toggle=\"collapse\"\r\n                                data-target=\"#collapseOne\"\r\n                                aria-expanded=\"true\"\r\n                                aria-controls=\"collapseOne\"\r\n                                style={myStyle}\r\n                            >\r\n                                Collapsible Group Item #1\r\n                            </button>\r\n                        </h2>\r\n                    </div>\r\n\r\n                    <div\r\n                        id=\"collapseOne\"\r\n                        className=\"collapse show\"\r\n                        aria-labelledby=\"headingOne\"\r\n                        data-parent=\"#accordionExample\"\r\n                    >\r\n                        <div className=\"card-body\" style={myStyle}>\r\n                            Some placeholder content for the first accordion panel. This panel\r\n                            is shown by default, thanks to the <code>.show</code> className.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\" id=\"headingTwo\">\r\n                        <h2 className=\"mb-0\">\r\n                            <button\r\n                                className=\"btn btn-link btn-block text-left collapsed\"\r\n                                type=\"button\"\r\n                                data-toggle=\"collapse\"\r\n                                data-target=\"#collapseTwo\"\r\n                                aria-expanded=\"false\"\r\n                                aria-controls=\"collapseTwo\"\r\n                                style={myStyle}\r\n                            >\r\n                                Collapsible Group Item #2\r\n                            </button>\r\n                        </h2>\r\n                    </div>\r\n                    <div\r\n                        id=\"collapseTwo\"\r\n                        className=\"collapse\"\r\n                        aria-labelledby=\"headingTwo\"\r\n                        data-parent=\"#accordionExample\"\r\n                    >\r\n                        <div className=\"card-body\" style={myStyle}>\r\n                            Some placeholder content for the second accordion panel. This\r\n                            panel is hidden by default.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\" id=\"headingThree\">\r\n                        <h2 className=\"mb-0\">\r\n                            <button\r\n                                className=\"btn btn-link btn-block text-left collapsed\"\r\n                                type=\"button\"\r\n                                data-toggle=\"collapse\"\r\n                                data-target=\"#collapseThree\"\r\n                                aria-expanded=\"false\"\r\n                                aria-controls=\"collapseThree\"\r\n                                style={myStyle}\r\n                            >\r\n                                Collapsible Group Item #3\r\n                            </button>\r\n                        </h2>\r\n                    </div>\r\n                    <div\r\n                        id=\"collapseThree\"\r\n                        className=\"collapse\"\r\n                        aria-labelledby=\"headingThree\"\r\n                        data-parent=\"#accordionExample\"\r\n                    >\r\n                        <div className=\"card-body\" style={myStyle}>\r\n                            And lastly, the placeholder content for the third and final\r\n                            accordion panel. This panel is hidden by default.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary\">{btnText}</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.modePassed} bg-${props.modePassed}`}>\r\n      <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item active\">\r\n            <Link className=\"nav-link\" to=\"/\">{props.homeText} <span className=\"sr-only\">(current)</span></Link>\r\n            \r\n             {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a> */}\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n          </li>\r\n        </ul>\r\n    \r\n        <div className={`custom-control custom-switch text-${props.modePassed===\"light\"?\"dark\":\"light\"}`}>\r\n          <input type=\"checkbox\" onClick={props.changeMode} className=\"custom-control-input\" id=\"customSwitch1\"/>\r\n          <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Enable DarkMode</label>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  homeText: PropTypes.string,\r\n  aboutText: PropTypes.string, \r\n  modePassed: PropTypes.string,\r\n  changeMode: PropTypes.func\r\n};\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n  function handleUpper() {\r\n\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Upper Case \", \"Sucess\");\r\n  }\r\n  function handleLower() {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lower Case \", \"Sucess\");\r\n  }\r\n  function handleClear() {\r\n\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Cleared the TextArea\", \"Sucess\");\r\n  }\r\n  function handleCopy(){\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied Text to Clipboard\", \"Sucess\");\r\n    document.getSelection().removeAllRanges(); //To remove the copy arrw from text already copied. \r\n  }\r\n  function handleRemoveSpaces(){\r\n    let newText = text.split(/[  ]+/);\r\n    // console.log(newText);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Removed Extra Spaces\", \"Sucess\");\r\n  }\r\n  //Event Functions\r\n   \r\n  function handleChange(event) {\r\n    setText(event.target.value);\r\n  }\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color: props.modePassed === \"dark\"?\"white\":\"#042743\"}}>\r\n        <h1 className=\"mb-4\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea className=\"form-control\" id=\"myBox\" style={{backgroundColor: props.modePassed===\"dark\"?\"#13466e\":\"white\", color:props.modePassed===\"dark\"?\"white\":\"#042743\"}} rows=\"5\" onChange={handleChange} value={text} placeholder=\"Enter text here\"></textarea>\r\n        </div>\r\n        <button type=\"button\" disabled={text.length===0} onClick={handleUpper} className=\"btn btn-primary mx-2 my-1\">\r\n          Convert to Upper Case\r\n        </button>\r\n        <button type=\"button\" disabled={text.length===0} onClick={handleLower} className=\"btn btn-primary mx-2 my-1\">\r\n          Convert to Lower Case\r\n        </button>\r\n        <button type=\"button\" disabled={text.length===0} onClick={handleClear} className=\"btn btn-primary mx-2 my-1\">\r\n          Clear Text\r\n        </button>\r\n        <button type=\"button\" disabled={text.length===0} onClick={handleCopy} className=\"btn btn-primary mx-2 my-1\">\r\n          Copy Text\r\n        </button>\r\n        <button type=\"button\" disabled={text.length===0} onClick={handleRemoveSpaces} className=\"btn btn-primary mx-2 my-1\">\r\n          Remove Extra Spaces\r\n        </button>\r\n        \r\n      </div>\r\n      <div className=\"container my-3\" style={{color:props.modePassed===\"dark\"?\"white\":\"#042743\"}}>\r\n        <h1>Your text summary</h1>\r\n        <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(/\\s+/).filter((element)=>{\r\n          return element.length!==0}).length} minutes will be required to read the text</p>\r\n        <h2> Preview</h2>\r\n        <p>{text.length>0?text:\"Nothing to preview Yet\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nTextForm.propTypes = {\r\n  modePassed: PropTypes.string,\r\n  heading: PropTypes.string,\r\n  showAlert:PropTypes.func  \r\n\r\n}\r\nexport default TextForm;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //checks whether dark mode is enabled or not.\n  const [alert, setAlert] = useState(null);\n  function showAlert(message, type) {\n    setAlert({\n      msg: message,\n      type: type, // the the right type is  the  type passeed in the function.\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  function toggleMode() {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"Success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"Success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  }\n  return (\n    <>\n      <Router>\n      <Navbar\n                title=\"Text-Utils\"\n                homeText=\"Home\"\n                aboutText=\"About\"\n                modePassed={mode}\n                changeMode={toggleMode}\n              />\n        <Alert alert={alert} />\n        <div className=\"container\" my-3>\n          <Switch>\n            \n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm\n                heading=\"Enter the text to analyze below\"\n                modePassed={mode}\n                showAlert={showAlert}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}