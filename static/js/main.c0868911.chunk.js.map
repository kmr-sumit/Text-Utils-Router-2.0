{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","style","height","alert","className","role","type","msg","Navbar","modePassed","href","title","id","onClick","changeMode","htmlFor","TextForm","useState","text","setText","color","heading","backgroundColor","rows","onChange","event","target","value","placeholder","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","App","mode","setMode","setAlert","message","setTimeout","homeText","aboutText","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c0868911.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    <div style={{ height: \"50px\" }}>\r\n      {props.alert &&\r\n      <div\r\n        className=\"alert alert-warning alert-dismissible fade show\"\r\n        role=\"alert\"\r\n      >\r\n        <strong>{props.alert.type}</strong> : {props.alert.msg}\r\n      </div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.modePassed} bg-${props.modePassed}`}>\r\n      <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item active\">\r\n            {/* <Link className=\"nav-link\" to=\"/\">{props.homeText} <span className=\"sr-only\">(current)</span></Link>\r\n             */}\r\n             <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n          </li> */}\r\n        </ul>\r\n        {/* <form className=\"form-inline my-2 my-lg-0\">\r\n          <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n          <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n        </form> */}\r\n        <div className={`custom-control custom-switch text-${props.modePassed===\"light\"?\"dark\":\"light\"}`}>\r\n          <input type=\"checkbox\" onClick={props.changeMode} className=\"custom-control-input\" id=\"customSwitch1\"/>\r\n          <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Enable DarkMode</label>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  homeText: PropTypes.string,\r\n  aboutText: PropTypes.string, \r\n  modePassed: PropTypes.string,\r\n  changeMode: PropTypes.func\r\n};\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n  function handleUpper() {\r\n\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Upper Case \", \"Sucess\");\r\n  }\r\n  function handleLower() {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lower Case \", \"Sucess\");\r\n  }\r\n  function handleClear() {\r\n\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Cleared the TextArea\", \"Sucess\");\r\n  }\r\n  function handleCopy(){\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied Text to Clipboard\", \"Sucess\");\r\n    document.getSelection().removeAllRanges(); //To remove the copy arrw from text already copied. \r\n  }\r\n  function handleRemoveSpaces(){\r\n    let newText = text.split(/[  ]+/);\r\n    // console.log(newText);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Removed Extra Spaces\", \"Sucess\");\r\n  }\r\n  //Event Functions\r\n   \r\n  function handleChange(event) {\r\n    setText(event.target.value);\r\n  }\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color: props.modePassed === \"dark\"?\"white\":\"#042743\"}}>\r\n        <h1 className=\"mb-4\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea className=\"form-control\" id=\"myBox\" style={{backgroundColor: props.modePassed===\"dark\"?\"#13466e\":\"white\", color:props.modePassed===\"dark\"?\"white\":\"#042743\"}} rows=\"5\" onChange={handleChange} value={text} placeholder=\"Enter text here\"></textarea>\r\n        </div>\r\n        <button type=\"button\" disabled={text.length===0} onClick={handleUpper} className=\"btn btn-primary mx-2 my-1\">\r\n          Convert to Upper Case\r\n        </button>\r\n        <button type=\"button\" disabled={text.length===0} onClick={handleLower} className=\"btn btn-primary mx-2 my-1\">\r\n          Convert to Lower Case\r\n        </button>\r\n        <button type=\"button\" disabled={text.length===0} onClick={handleClear} className=\"btn btn-primary mx-2 my-1\">\r\n          Clear Text\r\n        </button>\r\n        <button type=\"button\" disabled={text.length===0} onClick={handleCopy} className=\"btn btn-primary mx-2 my-1\">\r\n          Copy Text\r\n        </button>\r\n        <button type=\"button\" disabled={text.length===0} onClick={handleRemoveSpaces} className=\"btn btn-primary mx-2 my-1\">\r\n          Remove Extra Spaces\r\n        </button>\r\n        \r\n      </div>\r\n      <div className=\"container my-3\" style={{color:props.modePassed===\"dark\"?\"white\":\"#042743\"}}>\r\n        <h1>Your text summary</h1>\r\n        <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(/\\s+/).filter((element)=>{\r\n          return element.length!==0}).length} minutes will be required to read the text</p>\r\n        <h2> Preview</h2>\r\n        <p>{text.length>0?text:\"Nothing to preview Yet\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nTextForm.propTypes = {\r\n  modePassed: PropTypes.string,\r\n  heading: PropTypes.string,\r\n  showAlert:PropTypes.func  \r\n\r\n}\r\nexport default TextForm;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //checks whether dark mode is enabled or not.\n  const [alert, setAlert] = useState(null);\n  function showAlert(message, type) {\n    setAlert({\n      msg: message,\n      type: type, // the the right type is  the  type passeed in the function.\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  function toggleMode() {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"Success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"Success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar\n                title=\"Text-Utils\"\n                homeText=\"Home\"\n                aboutText=\"About\"\n                modePassed={mode}\n                changeMode={toggleMode}\n              />\n        <Alert alert={alert} />\n        <div className=\"container\" my-3>\n          {/* <Switch> */}\n            \n            {/* <Route exact path=\"/about\">\n              <About />\n            </Route> */}\n            {/* <Route exact path=\"/\"> */}\n              <TextForm\n                heading=\"Enter the text to analyze below\"\n                modePassed={mode}\n                showAlert={showAlert}\n              />\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}